unction: Function {
    parameters: [Identifier { token: Ident("y") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Ident("y"), expression: Some(Infix(InfixExpression { token: Plus, right: Some(Identifier(Identifier { token: Ident("y") })), operator: Plus, left: Some(Identifier(Identifier { token: Ident("x") })) })) })] }, 

    env: Env {
        store: {
        "addTwo": Function(Function { parameters: [Identifier { token: Ident("y") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Ident("y"), expression: Some(Infix(InfixExpression { token: Plus, right: Some(Identifier(Identifier { token: Ident("y") })), operator: Plus, left: Some(Identifier(Identifier { token: Ident("x") })) })) })] }, env: Env { store: {"x": Integer(2)}, outer: Some(Env { store: {"newAdder": Function(Function { parameters: [Identifier { token: Ident("x") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Semicolon, expression: Some(Function(FunctionLiteral { token: Function, parameters: [Identifier { token: Ident("y") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Ident("y"), expression: Some(Infix(InfixExpression { token: Plus, right: Some(Identifier(Identifier { token: Ident("y") })), operator: Plus, left: Some(Identifier(Identifier { token: Ident("x") })) })) })] } })) })] }, env: Env { store: {}, outer: None } })}, outer: None }) } }), 
        "newAdder": Function(Function { parameters: [Identifier { token: Ident("x") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Semicolon, expression: Some(Function(FunctionLiteral { token: Function, parameters: [Identifier { token: Ident("y") }], body: BlockStatement { token: Lbrace, statements: [Expression(ExpressionStatement { token: Ident("y"), expression: Some(Infix(InfixExpression { token: Plus, right: Some(Identifier(Identifier { token: Ident("y") })), operator: Plus, left: Some(Identifier(Identifier { token: Ident("x") })) })) })] } })) })] }, env: Env { store: {}, outer: None } })}, outer: None 
    } }
